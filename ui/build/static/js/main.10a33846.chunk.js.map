{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleChange","event","value","target","name","formData","state","setState","handlePredictClick","open","fetch","headers","method","body","JSON","stringify","then","response","json","result","isLoading","textfield1","textfield2","select1","select2","select3","this","className","Row","Group","as","Col","Label","href","Control","type","placeholder","block","variant","disabled","onClick","in","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,kQCmL5BC,G,kBA9Jb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRC,aAAe,SAACC,GACd,IAAMC,EAAQD,EAAME,OAAOD,MACrBE,EAAOH,EAAME,OAAOC,KACtBC,EAAW,EAAKC,MAAMD,SAC1BA,EAASD,GAAQF,EACjB,EAAKK,SAAS,CACZF,cAvBe,EA2BnBG,mBAAqB,SAACP,GACpB,IAAMI,EAAW,EAAKC,MAAMD,SAE5B,EAAKE,SAAS,CAAEE,MAAO,EAAKH,MAAMG,OAClCC,MAAM,oCACJ,CACEC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,MACRC,KAAMC,KAAKC,UAAUV,KAEtBW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJ,EAAKV,SAAS,CACZY,OAAQF,EAASE,OACjBC,WAAW,OAzCjB,EAAKd,MAAQ,CACXc,WAAW,EACXf,SAAU,CACRgB,WAAY,GACZC,WAAY,GACZC,QAAS,EACTC,QAAS,EACTC,QAAS,EACThB,MAAM,GAERU,OAAQ,IAbO,E,sEAsDjB,OAFAO,KAAKnB,SAAS,CAAEY,OAAQ,UAEjB,4BAHU,+B,+BAOjB,IAAMC,EAAYM,KAAKpB,MAAMc,UAEvBD,GADWO,KAAKpB,MAAMD,SACbqB,KAAKpB,MAAMa,QACpBV,EAAOiB,KAAKpB,MAAMG,KACxB,OACE,kBAAC,IAAD,KACE,yBAAKkB,UAAU,SACb,kDAEF,yBAAKA,UAAU,iBACf,kBAAC,IAAD,KACE,kBAAC,IAAKC,IAAN,KACE,kBAAC,IAAKC,MAAN,CAAYC,GAAIC,KACd,kBAAC,IAAKC,MAAN,gBAAoB,uBAAGC,KAAK,4BAAR,gBAApB,iBACA,kBAAC,IAAKC,QAAN,CACEC,KAAK,OACLC,YAAY,6CACZhC,KAAK,iBAMX,kBAAC,IAAKwB,IAAN,KACE,kBAAC,IAAKC,MAAN,CAAYC,GAAKC,KACf,kBAAC,IAAD,CACIM,OAAK,EACLC,QAAQ,UACRC,SAAUnB,EACVoB,QAAUpB,EAAsC,KAA1BM,KAAKlB,oBACzBY,EAAY,kBAAoB,eAM5C,kBAAC,IAAD,CAAUqB,GAAIhC,GACZ,yBAAKkB,UAAU,mBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,yCAET,kBAAC,IAAD,KACE,kBAAC,IAAKE,MAAN,CAAYC,GAAIC,SAMtB,yBAAKJ,UAAU,uBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,uCAET,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAK,sCACL,kBAAC,IAAD,KAAK,qCACL,kBAAC,IAAD,KAAK,qCACL,kBAAC,IAAD,KAAK,yCAGT,yBAAKA,UAAU,uBACb,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,8CAKS,KAAXR,EAAgB,KACb,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKQ,UAAU,oBACb,wBAAIe,GAAG,UAAUvB,U,GAlIfwB,cCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,iB","file":"static/js/main.10a33846.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport logo from './logo.svg';\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// function modifi() {\n//   const greeting = 'Hello Function Component!';\n//   // this.state.result = \"foook\";\n//   return <h1>{greeting}</h1>;\n// }\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      formData: {\n        textfield1: '',\n        textfield2: '',\n        select1: 1,\n        select2: 1,\n        select3: 1,\n        open: false\n      },\n      result: \"\"\n    };\n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  }\n\n  handlePredictClick = (event) => {\n    const formData = this.state.formData;\n    // this.setState({ isLoading: true });\n    this.setState({ open: !this.state.open});\n    fetch('http://0.0.0.0:5000/csv_detective', \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'GET',\n        body: JSON.stringify(formData)\n      })\n      .then(response => response.json())\n      .then(response => {\n        this.setState({\n          result: response.result,\n          isLoading: false\n        });\n      });\n\n  }\n\n  modifi() {\n    const greeting = 'Hello Function Component!';\n    this.setState({ result: \"foook\" });\n\n    return <h1>{greeting}</h1>;\n  }\n\n  render() {\n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n    const open = this.state.open;\n    return (\n      <Container>\n        <div className=\"title\">\n          <h1>DGF Column Linker</h1>\n        </div>\n        <div className=\"input_content\">\n        <Form>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label>Enter a <a href=\"https://www.data.gouv.fr\">data.gouv.fr</a> resource ID:</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"e.g., 1f0ebe13-e1f3-4adb-833a-dfc1ce8020fa\"\n                name=\"textfield1\"\n                // value={formData.textfield1}\n                // onChange={this.handleChange}\n                />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as ={Col}>\n              <Button\n                  block\n                  variant=\"success\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.handlePredictClick : null}>\n                  { isLoading ? 'Making analysis' : 'Analyze' }\n              </Button>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n        </div>\n        <Collapse in={open}>\n          <div className=\"results_content\">\n            <Row>\n                <Col><h3>Results</h3></Col>\n            </Row>\n            <Row>\n              <Form.Group as={Col}>\n\n              </Form.Group>\n            </Row>\n          </div>\n        </Collapse>\n        <div className=\"description_content\">\n          <Row>\n              <Col><h3>About</h3></Col>\n          </Row>\n          <Row>\n            <Col><h6>What?</h6></Col>\n            <Col><h6>Why?</h6></Col>\n            <Col><h6>How?</h6></Col>\n            <Col><h6>Where?</h6></Col>\n          </Row>\n        </div>\n        <div className=\"performance_content\">\n          <Row>\n          <Col>\n            <h3>Performance</h3>\n          </Col>\n          </Row>\n        </div>\n        {\n          result === \"\" ? null :\n            (<Row>\n              <Col className=\"result-container\">\n                <h5 id=\"result\">{result}</h5>\n              </Col>\n            </Row>)\n        }\n\n    </Container>\n    );\n  }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}